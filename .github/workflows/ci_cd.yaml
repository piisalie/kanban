name: CI/CD Elixir

on:
  push:
  workflow_dispatch:
jobs:
  ci:
    runs-on: ubuntu-latest
    name: Compile and such
    env:
      MIX_ENV: test
      ImageOS: ubuntu24
    steps:
      - uses: actions/checkout@v4

      - name: Setup Elixir
        id: setup-elixir
        uses: erlef/setup-beam@v1.18.2
        with:
          version-file: .tool-versions
          version-type: strict

      - name: Cache deps directory
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ steps.setup-elixir.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Get dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: mix deps.get

      - run: mix compile --warnings-as-errors

      - name: Check code is formatted
        run: mix format --check-formatted

      - name: Cache plt files
        uses: actions/cache@v4
        id: cache-plt
        env:
          KEY_BASE: plt-${{ runner.os }}-${{ steps.setup-elixir.outputs.elixir-version }}
        with:
          path: |
            priv/plts
          key: |
            ${{ env.KEY_BASE }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ env.KEY_BASE }}-

      - name: Create PLTs
        if: steps.cache-plt.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Dialyzer static analysis
        run: mix dialyzer --format github

      - name: Run tests
        run: mix test --max-failures 1 --trace --warnings-as-errors

  build-push:
    runs-on: ubuntu-latest
    needs: ci
    name: Build Docker image & push to ghcr.io
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/piisalie/kanban
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr
            type=sha,format=short
      - name: Parse versions from .tool-versions
        id: parse-asdf
        run: ./scripts/versions.sh

      - uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=registry,ref=ghcr.io/piisalie/kanban:cache
          cache-to: type=registry,ref=ghcr.io/piisalie/kanban:cache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          build-args: |
            ELIXIR_VERSION=${{ env.ELIXIR_VERSION }}
            OTP_VERSION=${{ env.ERLANG_VERSION }}
